<?php

/**
 * @file
 * Contains helfi azure fs hook implementations.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_entity_field_storage_info_alter().
 */
function helfi_azure_fs_entity_field_storage_info_alter(
  &$fields,
  EntityTypeInterface $entity_type,
) : void {
  $config = Drupal::config('helfi_azure_fs.settings');

  if (!$config->get('use_blob_storage')) {
    return;
  }
  $scheme = $config->get('storage_scheme') ?: 'azure';

  /** @var \Drupal\field\Entity\FieldStorageConfig[] $fields */
  foreach ($fields as $field) {
    if (!in_array($field->getType(), ['file', 'image'])) {
      continue;
    }
    $field->setSetting('uri_scheme', $scheme);
  }
}

/**
 * Implements hook_file_presave().
 */
function helfi_azure_fs_file_presave(FileInterface $file) : void {
  $new_filename = preg_replace('/[ +]/', '_', $file->getFilename());

  if ($new_filename !== $file->getFilename()) {
    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
    $file_system = \Drupal::service('file_system');
    $uri = $file->getFileUri();
    $directory = $file_system->dirname($uri);
    $uri = $directory . '/' . $new_filename;
    if ($new_uri = $file_system->move($file->getFileUri(), $uri, FileSystemInterface::EXISTS_RENAME)) {
      $file->set('uri', $new_uri);
      $file->set('filename', $file_system->basename($new_uri));
    }
  }
}
